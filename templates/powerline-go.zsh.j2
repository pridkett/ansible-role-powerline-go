# ########################################################### #
# this file is maintained by ansible-powerline-go             #
# see: https://github.com/pridkett/ansible-powerline-go       #
# changes may be overwritten by future invocations of ansible #
# ########################################################### #

export GOPATH="$HOME/go"

# configure suport for powerline-go, make this conditional on
# powerline-go being installed in the user GOPATH
if [ -f $GOPATH/bin/powerline-go ]; then
    zmodload zsh/datetime

    function preexec() {
        __TIMER=$EPOCHREALTIME
    }

    function powerline_precmd() {
        local __ERRCODE=$?
        local __DURATION=0

        if [ -n $__TIMER ]; then
            local __ERT=$EPOCHREALTIME
            __DURATION="$(($__ERT - ${__TIMER:-__ERT}))"
        fi
        unset __TIMER

        # don't display the error code after the first time
	if [ $__DURATION = "0." ]; then
            __ERRCODE=0
	fi

        {% if powerline_go.modules is defined %}
        local __MODULES="{{ powerline_go.modules }}"
        {% else %}
	local __MODULES="venv,user,host,ssh,cwd,perms,git,hg,duration,exit,root"
        {% endif %}
 
        PS1="$($GOPATH/bin/powerline-go -hostname-only-if-ssh -colorize-hostname -duration-min 0.001 -error $__ERRCODE -duration $__DURATION -jobs ${${(%):%j}:-0} -modules $__MODULES)"
    }
 
    function install_powerline_precmd() {
      for s in "${precmd_functions[@]}"; do
        if [ "$s" = "powerline_precmd" ]; then
          return
        fi
      done
      precmd_functions+=(powerline_precmd)
    }
    
    if [ "$TERM" != "linux" ] && [ -f "$GOPATH/bin/powerline-go" ]; then
        install_powerline_precmd
    fi
fi
